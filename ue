#!/bin/bash

# This script assumes an installation of WSL (Windows Subsystem for Linux)


if [[ -n ${TRACE} ]]; then
    set -o xtrace
fi

PROJECT_FILE=$(ls -1 *.uproject)
PROJECT=${PROJECT_FILE%.uproject}
PLATFORM="Win64"
BUILD_KIND=Development
UPROJECT_PATH=$(wslpath -m $PWD/$PROJECT_FILE)

# ENGINE_PATH is where your UE4 is installed.
ENGINE_PATH='/mnt/c/UnrealEngine/Engine'

LOGDATE=$(date +%Y%m%dT%H%M%S)

# `RELEASE_PATH_*` is where the project will end up when packaged.
RELEASE_PATH_CLIENT=$(wslpath -m "/mnt/c/Releases/${PROJECT}_${BUILD_KIND}_${PLATFORM}_Client_${LOGDATE}")
RELEASE_PATH_SERVER=$(wslpath -m "/mnt/c/Releases/${PROJECT}_${BUILD_KIND}_${PLATFORM}_Server_${LOGDATE}")

# Shouldn't need to modify these
BATCHFILES_PATH="$ENGINE_PATH/Build/BatchFiles"
BIN_CMD="cmd.exe"
EDITOR_PATH="${ENGINE_PATH}/Binaries/${PLATFORM}/UE4Editor.exe"
UBT_PATH="${ENGINE_PATH}/Binaries/DotNET/UnrealBuildTool.exe"

# WSL-safe paths to pass into batch file invocations
EDITOR_PATH_WSL=$(wslpath -u "${EDITOR_PATH}")
UBT_PATH_WSL=$(wslpath -u "${UBT_PATH}")
BATCHFILES_PATH_WSL=$(wslpath -w "${BATCHFILES_PATH}")
BATCHFILE_COMMON="${PROJECT}Editor ${PLATFORM} $BUILD_KIND ${UPROJECT_PATH} -waitmutex"

function run_editor {
    ${EDITOR_PATH} $*
}

function run_ubt {
    ${UBT_PATH} $*
}

# Launch the project in the UE4 editor
function edit() {
    run_editor ${UPROJECT_PATH} &
}

# Launch the editor as standalone game
function game() {
    run_editor ${UPROJECT_PATH} -game $* &
}

function game-local() {
    run_editor ${UPROJECT_PATH} 127.0.0.1 -game $*
}


# Launch the editor as dedicated server
function server() {
    run_editor ${UPROJECT_PATH} -log -nosteam -server
}

# Regenerate project files
function projectfiles() {
    run_ubt -projectfiles -project="${UPROJECT_PATH}" -game -rocket -progress
}

# This utility enables us to run the UE4 batch files while remaining in the
# present directory.
function ue_batch() {
    ${BIN_CMD} /c "$BATCHFILES_PATH_WSL\\$*"
}

function vs() {
    ${BIN_CMD} /c ${PROJECT}.sln
}

function build() {
    ue_batch Build.bat $BATCHFILE_COMMON
}

function rebuild() {
    ue_batch Rebuild.bat $BATCHFILE_COMMON
}

function clean() {
    ue_batch Clean.bat $BATCHFILE_COMMON
}

function copyClient() {
	rsync --recursive --progress --verbose $RELEASE_PATH_CLIENT /mnt/publicshared/Tardec_Coat/
}

function copyServer() {
	rsync --recursive --progress --verbose $RELEASE_PATH_SERVER /mnt/publicshared/Tardec_Coat/
}


function packageClient() {
    ue_batch RunUAT.bat BuildCookRun \
        -ScriptsForProject=${UPROJECT_PATH} \
        -archive \
        -archivedirectory=${RELEASE_PATH_CLIENT} \
        -build \
        -clientconfig=$BUILD_KIND \
        -cook \
        -installed \
        -nocompile \
        -nocompileeditor \
        -nodebuginfo \
        -nop4 \
        -package \
        -pak \
        -prereqs \
        -project=${UPROJECT_PATH} \
        -stage \
        -targetplatform=${PLATFORM} \
        -ue4exe=UE4Editor-Cmd.exe \
        -utf8output 

    echo $?
    echo "Project packaged to $RELEASE_PATH_CLIENT" >&2
}

function packageServer() {
    time ue_batch RunUAT.bat BuildCookRun \
        -allmaps \
        -archive \
        -archivedirectory=${RELEASE_PATH_SERVER} \
        -build \
        -clientconfig=$BUILD_KIND \
        -cook \
        -nop4 \
	-pak \
        -platform=Win64 \
        -project=${UPROJECT_PATH} \
        -server \
        -serverconfig=$BUILD_KIND \
        -servertarget=${PROJECT}Server \
        -ScriptsForProject=${UPROJECT_PATH} \
        -stage
    echo "Project server packaged to $RELEASE_PATH_SERVER" >&2
}


subcmd=$1
shift

case "$subcmd" in
    edit)
        edit $*
        ;;

    game)
        game $*
        ;;

    # Start the game by connecting to localhost
    game-local)
        game-local $*
        ;;

    server)
        server $*
        ;;

    # Regenerate project files
    projectfiles)
        projectfiles $*
        ;;

    # This is the requivalent of hitting compile in the editor
    build)
        build $*
        ;;

    # This is the equivalent of rebuilding the project from scratch in VS
    rebuild)
        rebuild
        ;;

    clean)
        clean
        ;;

    vs)
        vs
        ;;

    # Package up a client build
    package-client)
        packageClient
	copyClient
        ;;

    # Package up a client build
    package-server)
        packageServer
	copyServer
        ;;

    # Package up a server build
    package-all)
        packageClient
        packageServer
	#copyClient
	#copyServer
        ;;
esac
